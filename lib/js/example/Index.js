// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry        = require("bs-platform/lib/js/curry.js");
var Express      = require("bs-express/lib/js/src/Express.js");
var Js_json      = require("bs-platform/lib/js/js_json.js");
var CookieParser = require("../src/CookieParser.js");

function checkProperty(req, next, property, k) {
  var reqData = Express.Request[/* asJsonObject */1](req);
  var match = reqData[property];
  if (match !== undefined) {
    var match$1 = Js_json.decodeBoolean(match);
    if (match$1 && match$1[0]) {
      return Curry._1(k, /* () */0);
    } else {
      return Curry._1(next, Express.Next[/* route */1]);
    }
  } else {
    return Curry._1(next, Express.Next[/* route */1]);
  }
}

function checkProperties(req, next, properties, k) {
  var aux = function (properties) {
    if (properties) {
      var tl = properties[1];
      return checkProperty(req, next, properties[0], (function () {
                    return aux(tl);
                  }));
    } else {
      return Curry._1(k, /* () */0);
    }
  };
  return aux(properties);
}

function setProperty(req, property) {
  var reqData = Express.Request[/* asJsonObject */1](req);
  reqData[property] = true;
  return /* () */0;
}

function getDictString(dict, key) {
  var match = dict[key];
  if (match !== undefined) {
    return Js_json.decodeString(match);
  } else {
    return /* None */0;
  }
}

function makeSuccessJson() {
  var json = { };
  json["success"] = true;
  return json;
}

var app = Express.express(/* () */0);

Curry._3(Express.App[/* get */4], app, "/nullCookies", Express.Middleware[/* from */3]((function (next, req) {
            var match = Express.Request[/* cookies */7](req);
            if (match) {
              return Curry._1(next, Express.Next[/* route */1]);
            } else {
              var partial_arg = makeSuccessJson(/* () */0);
              var partial_arg$1 = Express.Response[/* sendJson */3];
              return (function (param) {
                  return partial_arg$1(partial_arg, param);
                });
            }
          })));

Curry._3(Express.App[/* get */4], app, "/nullSignedCookies", Express.Middleware[/* from */3]((function (next, req) {
            var match = Express.Request[/* signedCookies */8](req);
            if (match) {
              return Curry._1(next, Express.Next[/* route */1]);
            } else {
              var partial_arg = makeSuccessJson(/* () */0);
              var partial_arg$1 = Express.Response[/* sendJson */3];
              return (function (param) {
                  return partial_arg$1(partial_arg, param);
                });
            }
          })));

Curry._3(Express.App[/* getWithMany */5], app, "/cookies", /* array */[
      CookieParser.make(/* None */0, /* () */0),
      Express.Middleware[/* from */3]((function (next, req) {
              var match = Express.Request[/* cookies */7](req);
              if (match) {
                var match$1 = getDictString(match[0], "key");
                if (match$1) {
                  if (match$1[0] === "value") {
                    var partial_arg = makeSuccessJson(/* () */0);
                    var partial_arg$1 = Express.Response[/* sendJson */3];
                    return (function (param) {
                        return partial_arg$1(partial_arg, param);
                      });
                  } else {
                    return Curry._1(next, Express.Next[/* route */1]);
                  }
                } else {
                  return Curry._1(next, Express.Next[/* route */1]);
                }
              } else {
                return Curry._1(next, Express.Next[/* route */1]);
              }
            }))
    ]);

Express.App[/* listen */19](app, /* Some */[3000], /* None */0, /* () */0);

exports.checkProperty   = checkProperty;
exports.checkProperties = checkProperties;
exports.setProperty     = setProperty;
exports.getDictString   = getDictString;
exports.makeSuccessJson = makeSuccessJson;
exports.app             = app;
/* app Not a pure module */
